{
  "version": 3,
  "sources": ["../../../app/routes/app.products.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.products.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.products.tsx\");\n  import.meta.hot.lastModified = \"1758733863615\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { Page, Layout, Text, Card, Button, BlockStack, Box, DataTable, Badge } from \"@shopify/polaris\";\nimport { TitleBar } from \"@shopify/app-bridge-react\";\nimport { authenticate } from \"../shopify.server\";\nexport const loader = async ({\n  request\n}) => {\n  const {\n    admin,\n    session\n  } = await authenticate.admin(request);\n\n  // Fetch products from Shopify\n  const response = await admin.graphql(`#graphql\n      query getProducts($first: Int!) {\n        products(first: $first) {\n          nodes {\n            id\n            title\n            handle\n            status\n            totalInventory\n            createdAt\n            images(first: 1) {\n              nodes {\n                url\n                altText\n              }\n            }\n            variants(first: 1) {\n              nodes {\n                price\n              }\n            }\n          }\n        }\n      }`, {\n    variables: {\n      first: 10\n    }\n  });\n  const responseJson = await response.json();\n  const products = responseJson.data?.products?.nodes || [];\n  return json({\n    products\n  });\n};\nexport default function Products() {\n  _s();\n  const {\n    products\n  } = useLoaderData();\n  const rows = products.map(product => [product.title, product.handle, product.variants.nodes[0]?.price || \"N/A\", product.totalInventory || 0, <Badge key={product.id} tone=\"success\">\n      AI Ready\n    </Badge>, <Button key={`edit-${product.id}`} size=\"slim\">\n      Configure AI\n    </Button>]);\n  return <Page>\n      <TitleBar title=\"Product Management\" />\n      <Layout>\n        <Layout.Section>\n          <Card>\n            <BlockStack gap=\"500\">\n              <BlockStack gap=\"200\">\n                <Text as=\"h2\" variant=\"headingMd\">\n                  AI Try-On Product Configuration\n                </Text>\n                <Text variant=\"bodyMd\" as=\"p\">\n                  Configure your products for AI virtual try-on functionality.\n                  Products need proper images and metadata for optimal AI processing.\n                </Text>\n              </BlockStack>\n              \n              {products.length > 0 ? <DataTable columnContentTypes={['text', 'text', 'text', 'numeric', 'text', 'text']} headings={['Product', 'Handle', 'Price', 'Inventory', 'AI Status', 'Actions']} rows={rows} /> : <Box padding=\"400\">\n                  <BlockStack gap=\"200\" align=\"center\">\n                    <Text as=\"p\" variant=\"bodyMd\">\n                      No products found. Create some products in your Shopify admin first.\n                    </Text>\n                    <Button url={`https://${process.env.SHOP_DOMAIN || 'your-shop'}.myshopify.com/admin/products`} target=\"_blank\">\n                      Go to Products\n                    </Button>\n                  </BlockStack>\n                </Box>}\n            </BlockStack>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </Page>;\n}\n_s(Products, \"myEvnF20fcYyfWpqSQ3PXWXvEBg=\", false, function () {\n  return [useLoaderData];\n});\n_c = Products;\nvar _c;\n$RefreshReg$(_c, \"Products\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAIrB,qBAA6B;AAiDkH;AAzE/I,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kCAAoC,EAAE;AAAA,EAC/E;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6B;AAC7B,cAAY,IAAI,eAAe;AACjC;AAmDe,SAAR,WAA4B;AACjC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,OAAO,SAAS,IAAI,aAAW,CAAC,QAAQ,OAAO,QAAQ,QAAQ,QAAQ,SAAS,MAAM,CAAC,GAAG,SAAS,OAAO,QAAQ,kBAAkB,GAAG,mDAAC,SAAuB,MAAK,WAAU,wBAA3B,QAAQ,IAApB;AAAA;AAAA;AAAA;AAAA,SAE3I,GAAU,mDAAC,UAAkC,MAAK,QAAO,4BAAlC,QAAQ,QAAQ,MAA7B;AAAA;AAAA;AAAA;AAAA,SAEV,CAAS,CAAC;AACZ,SAAO,mDAAC,QACJ;AAAA,uDAAC,YAAS,OAAM,wBAAhB;AAAA;AAAA;AAAA;AAAA,WAAqC;AAAA,IACrC,mDAAC,UACC,6DAAC,OAAO,SAAP,EACC,6DAAC,QACC,6DAAC,cAAW,KAAI,OACd;AAAA,yDAAC,cAAW,KAAI,OACd;AAAA,2DAAC,QAAK,IAAG,MAAK,SAAQ,aAAY,+CAAlC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,QAAK,SAAQ,UAAS,IAAG,KAAI,gJAA9B;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WAPF;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,MAEC,SAAS,SAAS,IAAI,mDAAC,aAAU,oBAAoB,CAAC,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,MAAM,GAAG,UAAU,CAAC,WAAW,UAAU,SAAS,aAAa,aAAa,SAAS,GAAG,QAAnK;AAAA;AAAA;AAAA;AAAA,aAA+K,IAAK,mDAAC,OAAI,SAAQ,OACpN,6DAAC,cAAW,KAAI,OAAM,OAAM,UAC1B;AAAA,2DAAC,QAAK,IAAG,KAAI,SAAQ,UAAS,oFAA9B;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,UAAO,KAAK,WAAW,QAAQ,IAAI,eAAe,4CAA4C,QAAO,UAAS,8BAA/G;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WANF;AAAA;AAAA;AAAA;AAAA,aAOA,KARuM;AAAA;AAAA;AAAA;AAAA,aASzM;AAAA,SApBJ;AAAA;AAAA;AAAA;AAAA,WAqBA,KAtBF;AAAA;AAAA;AAAA;AAAA,WAuBA,KAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA,KA1BF;AAAA;AAAA;AAAA;AAAA,WA2BA;AAAA,OA7BG;AAAA;AAAA;AAAA;AAAA,SA8BL;AACJ;AACA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
